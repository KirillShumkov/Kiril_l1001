// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using System.CodeDom.Compiler;
using CoreGraphics;

namespace OOPGUI
{
    public partial class Register : NSViewController
    {
        #region Private Variables
        private string _login = "Введите логин";
        private string _password = "Введите пароль";
        private string _passwordagain = "Введите пароль еще раз";
        private NSViewController _presentor;
        #endregion

        #region Computed Properties
        public string DialogLogin
        {
            get { return _login; }
            set { _login = value; }
        }

        public string Dialogpassword
        {
            get { return _password; }
            set { _password = value; }
        }

        public string Dialogpasswordagain
        {
            get { return _passwordagain; }
            set { _passwordagain = value; }
        }

        public NSViewController Presentor
        {
            get { return _presentor; }
            set { _presentor = value; }
        }
        #endregion

        #region Constructors
        public Register(IntPtr handle) : base(handle)
        {
        }
        #endregion

        #region Override Methods
        public override void ViewWillAppear()
        {
            base.ViewWillAppear();

            // Set initial title and description
            Login.StringValue = DialogLogin;
            Password.StringValue = Dialogpassword;
            Passwordagain.StringValue = Dialogpasswordagain;
        }
        #endregion

        #region Private Methods
        private void CloseDialog()
        {
            Presentor.DismissViewController(this);
        }
        #endregion

        #region Custom Actions
        partial void ExitR(Foundation.NSObject sender)
        {
            RaiseDialogExitR();
            CloseDialog();
        }

        partial void BackR(Foundation.NSObject sender)
        {
            RaiseDialogBackR();
            CloseDialog();
        }
        #endregion

        #region Events
        public EventHandler DialogExitR;

        internal void RaiseDialogExitR()
        {
            if (this.DialogExitR != null)
                this.DialogExitR(this, EventArgs.Empty);
        }

        public EventHandler DialogBackR;

        internal void RaiseDialogBackR()
        {
            if (this.DialogBackR != null)
                this.DialogBackR(this, EventArgs.Empty);
        }
        #endregion


    }
}
